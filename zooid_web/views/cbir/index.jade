extends ../layout
block body
  include ../control/nav
  script(src="/js/HighCharts.js")
  script(src="/js/HighCharts_custom.js")
  script(src="/js/dropzone.js")
  script(src="/js/fabric.min.js")
  script(src="/js/jquery_ui.js")
  script(src="/js/slider.js")
  script(src="/js/adapter.js")

  link(rel='stylesheet', href='//code.jquery.com/ui/1.11.2/themes/smoothness/jquery-ui.css')
    

    



  .container-fluid.row
  
    h4 Content Based Image Retrieval
      a(type='button', data-toggle='modal', data-target='#uploadModal').btn.btn-default.scootRight.btn-sm
        //- fa.fa.fa-fw.fa-refresh.text-muted
        o New Search
      a(type='button', data-toggle='modal', data-target='#uploadModal').btn.btn-default.scootRight.btn-sm
        //- fa.fa.fa-fw.fa-check.text-muted
        o Learn pattern
      a.btn.btn-default.scootRight.btn-sm.test_cluster
        //- fa.fa.fa-fw.fa-check.text-muted
        o Test
    br

  .container-fluid.row

    .col-md-5
      .panel.panel-default
        #features_canvas.btn-block
        canvas#main_canvas(width="100px", height="100px")

        //- img#searchImage(src="").img-responsive.thumbnail

      .panel.panel-default
        #contentBreakdown.contentBreakdown.btn-block




      hr

    .col-md-7

      .panel-heading Similar Images
      .panel.panel-default
        .panel-body.well-sm

          .col-md-8
            #searchResults
            //- a(type='button', data-toggle='modal', data-target='#uploadModal').btn.btn-default.scootRight
            //-   fa.fa.fa-fw.fa-search.text-muted
            //-   o New Search
            //- a(type='button', data-toggle='modal', data-target='#uploadModal').btn.btn-default.scootRight
            //-   fa.fa.fa-fw.fa-sliders.text-muted
            //-   o Weights


          .col-md-4.panel.panel-default
            br
            b w1
            .slide
            b w2
            .slide
            br



      .panel-heading Extracted Features
      .panel.panel-default
        .panel-body
          #features_container




  #uploadModal.modal.fade(tabindex='-1', role='dialog', aria-labelledby='myModalLabel', aria-hidden='true')
    .modal-dialog
      .modal-content
        .modal-header
          button.close(type='button', data-dismiss='modal')
            span(aria-hidden='true') Ã—
            span.sr-only Close
          text-center
            p.lead#myModalLabel.modal-title 
              o Drag an image 
              o.fa.fa-arrow-down.fa-fw.text-muted
              o to start your search.

        .dropzone#dropzone
          form(action="/cbr/search")
            .fallback
              input(type="file", name="file")
          .hide
            

        .modal-footer
          button.btn.btn-default(type='button', data-dismiss='modal') Close
          button.btn.btn-primary(type='button') Done

    #previews


  script.
    $(function() {
      // setup master volume
      $( ".slide" ).slider({
        value: 60,
        orientation: "horizontal",
        range: "min",
        animate: true
      });
    });


    var canvas = new fabric.Canvas('main_canvas');
    scale_factor = 1 

    // make new instance of Model
    var signalModel = new $.eventModel();
    
    // Listen for when things of this model type are created
    signalModel.on('created', function(info,item) {

      if(item.data.data){

        if(item.data.noun == "faces" || item.data.noun == "vehicles") return 0;

        var mask = item.data.data
        console.log(mask)

        // create a rectangle object
        var rect = new fabric.Rect({
          left: mask.x*canvas.scale_factor,
          top: mask.y*canvas.scale_factor,
          width: mask.width*canvas.scale_factor,
          height: mask.height*canvas.scale_factor,
          hasControls: false,
          //- shadow: {color:'rgba(0,0,0,0.7) 0px 2px 4px'},
            stroke:"rgba(0,0,0,1)",
            fill:"rgba(0,0,0,1)",
          selectable: false
        });
          
        canvas.add(rect);

        fabric.Image.fromURL("/images/"+item.data.filename, function(img) {
           img.set({ 
            left: mask.x*canvas.scale_factor,
            top: mask.y*canvas.scale_factor,
            opacity:1,
            width: mask.width*canvas.scale_factor,
            height: mask.height*canvas.scale_factor,
            hasControls: false,
            centeredScaling:true,
            originX: 'left', 
            hasControls: false,
          stroke:"rgba(160,255,160,1)",
            selectable: false,
            originY: 'top'
          });

          //- var filter = new fabric.Image.filters.Invert();
          //- img.filters.push(filter);
          //- img.applyFilters(canvas.renderAll.bind(canvas));

          canvas.add(img);
        });


        var text = new fabric.Text( (item.data.name||item.data.noun), { 
          fontSize:10, 
          fontFamily:"arial", 
          textAlign: 'center',
          left: Math.round(rect.left + 4), 
          top: Math.round(rect.top - 16),
          fill:'rgba(255,255,255,1)',
          shadow: 'rgba(0,0,0,1) 0px 1px 4px',
          hasControls: false,
          selectable: false

        });
        canvas.add(text);

      }

      if(item.data.signature){
        console.log(item.data.signature)
        $("#contentBreakdown").append($("<div>", { id:item.id+"chart", class:"btn-sm btn-block", style:""})).find("#"+item.id+"chart").highcharts({
            chart:{animation:false,type:(item.data.chart_type || "column"),height:100,backgroundColor:"none"},
            title:{style:{y:'20px',"fontSize": "10px"},text:(item.data.transform || item.data.title || item.data.noun  || item.data.name )},
            legend:{enabled:false},credits: {enabled: false },
            xAxis: { 
                gridLineWidth: 0,
                labels: {
                  enabled:false,
                  style: {
                    fontSize: '10px',
                }}
            },
            yAxis: {
              title:{text:""},
              gridLineWidth: 0,
              labels: {
                  enabled:false
              }
            },
            plotOptions: { series: { 
              borderColor:"#222222",
              marker:{enabled:false},
              stacking: (item.data.stack || null),
              shadow:{ color:"#000000", offsetX:0, offsetY:0, opacity:0.7, width:0}
            }},
            series: [{
              color:"#99999f",
              data: item.data.signature
            }]
        });


        io.socket.post("/cbr/nn", {signature:item.data.signature}, function(res,info){

          $("#searchResults").append($("<h1>result</h1>"))
          console.log(res,info)
            
        })



      }
      if(item.data.histogram){

        $("#contentBreakdown").append($("<div>", { id:item.id+"chart", class:"btn-sm btn-block", style:""})).find("#"+item.id+"chart").highcharts({
            chart:{animation:false,type:(item.data.chart_type || "column"),height:100,backgroundColor:"none"},
            title:{style:{y:'20px',"fontSize": "10px"},text:(item.data.transform || item.data.title || item.data.noun  || item.data.name )},
            legend:{enabled:false},credits: {enabled: false },
            xAxis: { 
                gridLineWidth: 0,
                labels: {
                  enabled:false,
                  style: {
                    fontSize: '10px',
                }}
            },
            yAxis: {
              title:{text:""},
              gridLineWidth: 0,
              labels: {
                  enabled:false
              }
            },
            plotOptions: { series: { 
              borderColor:"none",
              //- groupPadding: 0,
              marker:{enabled:false},
              stacking: (item.data.stack || null),
              shadow:{ color:"#000000", offsetX:0, offsetY:0, opacity:0.7, width:0}
            }},
            series: [{
              color:"#aa0000",
              data: item.data.histogram.r
            },
            {
            color:"#00aa00",
                data: item.data.histogram.g
            },
            {
            color:"#0000aa",
                data: item.data.histogram.b
            }]
        });



      } else {

        //- $(".contentBreakdown").append($("<div>", { id:item.data.id, html: "<h1>"+JSON.stringify(item)+"</h1>"}))
        if(item.data.filename){

          $("#features_container").append(

            $("<div>", {
            class:"thumbnail ",
            style:"display:inline-flex;margin:2px;padding:1px;border:0px solid #d2d2d2;",
            html:$("<img>", {
              class:"img-responsive",
              src: "/images/"+item.data.filename,
              style:"width:auto;height:48px;margin:0px;",
              })
              .webuiPopover({
                title:(item.data.name||item.data.noun||item.id),
                content:$("<pre>"+JSON.stringify(item.data) +"</pre>", {class:"description"})
                })
              })
            )
          }
        }
    })





    // bind dom to model with sockets
    function dom_glue(model){

      io.socket.on( model, function(item){
        console.log(model,item)
          signalModel.emit(item.verb, item);
      })

      io.socket.get( "/"+model, {limit:1}, function(items){

        $.map(items, function(item){
          console.log(item)
          signalModel.emit('created', {
            id:item.id,
            data:item
          })
        })
      })
    }

    // When document is ready, grab latest things.
    $(document).ready(function(){

      dom_glue("cbr");
      dom_glue("signal");


      /**
       * Tests the cluster, broadcasts "test" to all the zodes from the
       * controller and paints responses through normal socket flow.
       * @param  {[type]}  error
       * @return {[type]}   [description]
       */
      
      $(document).on('click', '.test_cluster', function(error){
        io.socket.post("/cbir/test", {});
      })

    })




    Dropzone.options.dropZone = {
      paramName: "file", // The name that will be used to transfer the file
      maxFilesize: 2 // MB
    };

    $(document).ready(function() {
      
      $("#uploadModal").modal("show");
      

      var myDropzone = new Dropzone("#dropzone", { url: "/cbr/search"})
      myDropzone.on("success", function(info,res){ 

          $("#searchImage").attr("src", "");
          $("#searchImage").attr("src", res.src);
          $("#features_container").html("")
          $("#contentBreakdown").html("")
          $("#uploadModal").modal("hide");
           
          var w = info.width
          var h = info.height

          var cw = $("#features_canvas").width()
          var ch = ( h / w ) * cw

          scale_factor = cw/w
          canvas.scale_factor = scale_factor

          console.log(w,h, res.filename)

            canvas.clear()
            $("#uploadModal").modal("hide");

            //- fabric.Image.fromURL("/images/"+res.filename, function(oImg){
            //-   oImg.selectable = false
            //-   oImg.scale(cw/w)
            //-   canvas.add(oImg);
            //- });

            fabric.Image.fromURL("/images/"+res.filename, function(img) {
               img.set({width: cw, height: ch, originX: 'left', originY: 'top'});
               canvas.setBackgroundImage(img, canvas.renderAll.bind(canvas));
                
            });

                
            signalModel.emit('created', {
              id:res.id,
              data:res
            })



            function resizeCanvas() {
                var cw = $("#features_canvas").width()

                var ch = ( h / w ) * cw
                canvas.setWidth(cw);
                canvas.setHeight(ch);
                canvas.renderAll();

            }

            // resize on init
            resizeCanvas();
          window.addEventListener('resize', resizeCanvas, false);



            //- canvas.on("mouse:move", function(a){ 
              
            //-   x = a.e.layerX || 0
            //-   y = a.e.layerY || 0

            //-   var xm = (x - (cw/2))/cw
            //-   var ym = (y - (ch/2))/ch

            //-   var objects = canvas.getObjects();
            //-   for(var i = 0; i < objects.length; i++){
            //-     //- console.log(objects[i])
            //-       objects[i].setTop( objects[i].top + ym )
            //-       objects[i].setLeft( objects[i].left + xm )
            //-       canvas.renderAll();

            //-   }

            //- });

  
              //- $("#main_canvas").parent(function(){ this.width(cw); })
              //- $("#canvas-container").width(cw)
              //- $("#canvas-container").height(ch)

              //- $("#main_canvas").parent(function(){ this.height(ch); })
              //- $("#main_canvas").width(cw)
              //- $("#main_canvas").height(ch)
      })})



      var dropbox = document.getElementById('dropzone');

      dropbox.addEventListener('dragenter', noopHandler, false);
      dropbox.addEventListener('dragexit', noopHandler, false);
      dropbox.addEventListener('dragover', noopHandler, false);
      dropbox.addEventListener('drop', drop, false);

      function noopHandler(evt) {
          evt.stopPropagation();
          evt.preventDefault();
      }

      function drop(evt) {
          evt.stopPropagation();
          evt.preventDefault(); 
          var getURL = evt.dataTransfer.getData('Url');
          
          if(getURL) {
            io.socket.post("/signal/getURL", {getURL:getURL} , function(a,b){
              console.log(getURL,a,b)
            })
          }
      }





    //- script.

    //-   $(document).ready(function(){

    //-     // Instantiate a slider
    //-     var mySlider = $(".slider").bootstrapSlider({min:0.01,max:0.99,value:0.33,step:0.01});

    //-     $("input.slider").on("slideStop", function(){
    //-       var value = mySlider.bootstrapSlider('getValue');
    //-       console.log(value);

    //-     })


    //-     // Call a method on the slider
    //-     var value = mySlider.bootstrapSlider('getValue');

    //-     // For non-getter methods, you can chain together commands
    //-         mySlider
    //-             .bootstrapSlider('setValue', 5)
    //-             .bootstrapSlider('setValue', 7);
    //-   })








