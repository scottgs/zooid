block content
  #graphVisualization(style="width:100%;height:300px;")


  script(type="text/javascript" src="/js/vivagraph.js")
  script.
      (function (io) {

      var socket = io.connect();
          nodeSize = 18;



      function forceGraph() {
           var graph = Viva.Graph.graph(),
                graphics = Viva.Graph.View.svgGraphics(),
                renderer = Viva.Graph.View.renderer(graph, {
                    container : document.getElementById('graphVisualization'),
                    layout: Viva.Graph.Layout.forceDirected(graph, {
                      dragCoeff : 0.01
                }),
                    graphics: graphics
                });
            graphics.link(function(link){
                var isNode = (link.data === 'node'),
                    ui = Viva.Graph.svg('path')
                           .attr('stroke', isNode ? '#d2d2d2' : '#43526a')
                           .attr('stroke-dasharray', isNode ? '5, 5' : '0,0')
                           .attr('fill', 'none');
                ui.isNode = isNode; // remember for future.
                return ui;
            }).placeLink(function(linkUI, fromPos, toPos) {
                // linkUI - is the object returend from link() callback above.
                var ry = linkUI.isNode ? 0 : 0,
                // using arc command: http://www.w3.org/TR/SVG/paths.html#PathDataEllipticalArcCommands
                    data = 'M' + fromPos.x + ',' + fromPos.y +
                           ' A 10,' + ry + ',-0,0,0,' + toPos.x + ',' + toPos.y;
                // 'Path data' (http://www.w3.org/TR/SVG/paths.html#DAttribute )
                // is a common way of rendering paths in SVG:
                linkUI.attr("d", data);
            });


            graphics.node(function(node) {
              var isNode = (node.data === 'node')

              var link = isNode ? 'http://www.iconsdb.com/icons/preview/black/stack-xl.png' : "http://www.iconsdb.com/icons/preview/black/ssd-xl.png";
              size = nodeSize + (isNode ? nodeSize*1.5 : 0)
              // This time it's a group of elements: http://www.w3.org/TR/SVG/struct.html#Groups
              var ui = Viva.Graph.svg('g'),
                  // Create SVG text element with user id as content
                  svgText = Viva.Graph.svg('text')
                  .attr('y', '-4px')
                  .attr('font-size', isNode ? '5px' : '2px')
                  .text(node.id),
                  img = Viva.Graph.svg('image')
                     .attr('width', size)
                     .attr('height', size)
                     .link( link );
              ui.append(svgText);
              ui.append(img);
              return ui;
            }).placeNode(function(nodeUI, pos) {
                // 'g' element doesn't have convenient (x,y) attributes, instead
                // we have to deal with transforms: http://www.w3.org/TR/SVG/coords.html#SVGGlobalTransformAttribute
                nodeUI.attr('transform',
                            'translate(' +
                                  (pos.x - size/2) + ',' + (pos.y - size/2) +
                            ')');
            });


            renderer.run();

            return graph;
        }


      graph = forceGraph()



      $(document).ready(function(){
      
       /**
         * Listens for model changes over socket.
         * @param  {String} model   Model name
         * @return null
         */
      
        socket.on( "zode", function(zode){

          if(zode.verb == "created")
            graph.addLink( zode.data.name, zode.data.ip, "node")

          if(zode.verb == "destroyed")
            graph.removeNode( zode.id, zode.data.ip, "node")

          if(zode.verb == "updated")
            graph.removeNode( zode.id, zode.data.ip, "node")
        })

        /**
         * Gets some amount of the signals from the model
         * for display now, and bsubscribe to them.
         * Intended to be customized, kinda.
         * @param  {String}   model name
         * @return null
         */
        
        socket.get( "/zode/find", { limit:50 }, function(zodes){

          $.map(zodes, function(zode){

            //- graph.addNode( zode.ip, zode.ip )
            //- graph.addNode( zode.name, zode.name )
            //- graph.addNode( zode.name, zode.id )
            //- graph.addLink( zode.ip, zode.id, "node" )
            //- graph.addLink( zode.id, zode.name, "node" )
            //- graph.addLink( zode.ip, "web" )

            graph.addNode( zode.ip, "node")
            graph.addNode( zode.name )
            graph.addLink( zode.ip, "node")
            graph.addLink( zode.ip, zode.name, "node")


          })

        })


      })


      })(window.io);
page